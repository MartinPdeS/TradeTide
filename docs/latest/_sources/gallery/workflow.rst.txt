
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/workflow.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_workflow.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_workflow.py:


Complete Trading Strategy Workflow with Bollinger Bands
========================================================

This comprehensive example demonstrates a complete end-to-end trading workflow
using the TradeTide library. We'll build a Bollinger Bands-based trading strategy,
backtest it on historical CAD/USD data, and analyze the results.

The workflow covers:
- Market data loading and visualization
- Technical indicator configuration (Bollinger Bands)
- Strategy setup and signal generation
- Position management and risk controls
- Portfolio simulation and performance analysis

This example is perfect for understanding how all TradeTide components work together
to create a professional trading system.

.. GENERATED FROM PYTHON SOURCE LINES 21-24

Import Required Libraries
-------------------------
We start by importing all necessary modules from TradeTide and standard libraries.

.. GENERATED FROM PYTHON SOURCE LINES 24-45

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np
    from TradeTide import (
        Strategy,
        Portfolio,
        PositionCollection,
        Market,
        Currency,
        days,
        hours,
        minutes,
    )
    from TradeTide.indicators import BollingerBands
    from TradeTide import capital_management, exit_strategy

    # Configure matplotlib for better plots
    plt.style.use("seaborn-v0_8-darkgrid")
    plt.rcParams["figure.figsize"] = (12, 8)
    plt.rcParams["font.size"] = 10








.. GENERATED FROM PYTHON SOURCE LINES 46-50

Load Market Data
----------------
First, we load historical forex data for the CAD/USD currency pair.
We'll use 4 hours of data to demonstrate the strategy on recent market movements.

.. GENERATED FROM PYTHON SOURCE LINES 50-63

.. code-block:: Python


    market = Market()

    # Load 4 hours of CAD/USD data from the database
    market.load_from_database(
        currency_0=Currency.CAD,
        currency_1=Currency.USD,
        time_span=4 * hours,
    )

    # Display basic market information
    market.display()








.. GENERATED FROM PYTHON SOURCE LINES 64-69

Configure Bollinger Bands Indicator
------------------------------------
We'll use Bollinger Bands as our primary technical indicator. Bollinger Bands
consist of a moving average with upper and lower bands that expand and contract
based on market volatility.

.. GENERATED FROM PYTHON SOURCE LINES 69-79

.. code-block:: Python


    # Configure Bollinger Bands with 3-minute window and 1.0 standard deviation multiplier
    indicator = BollingerBands(
        window=3 * minutes,  # Moving average window
        multiplier=1.0,  # Standard deviation multiplier for bands
    )

    # Run the indicator on our market data
    indicator.run(market)








.. GENERATED FROM PYTHON SOURCE LINES 80-84

Build Trading Strategy
----------------------
Now we create a trading strategy that uses our Bollinger Bands indicator
to generate buy and sell signals.

.. GENERATED FROM PYTHON SOURCE LINES 84-95

.. code-block:: Python


    # Create strategy and add our indicator
    strategy = Strategy()
    strategy.add_indicator(indicator)

    # Generate trading signals based on the strategy
    trade_signals = strategy.get_trade_signal(market)
    signal_count = np.count_nonzero(trade_signals)

    print(f"Strategy generated {signal_count} trading signals")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Strategy generated 72 trading signals




.. GENERATED FROM PYTHON SOURCE LINES 96-100

Visualize Bollinger Bands and Market Data
------------------------------------------
Let's plot the Bollinger Bands to visualize the indicator behavior
and understand where trading signals are generated.

.. GENERATED FROM PYTHON SOURCE LINES 100-119

.. code-block:: Python


    # Create the indicator plot (shows only ask prices for clarity)
    figure = indicator.plot(show=False)

    ax = figure.axes[0]

    # Enhance the plot with additional information
    ax.set_title("CAD/USD with Bollinger Bands Strategy", fontsize=14, fontweight="bold")
    ax.set_xlabel("Time", fontsize=12)
    ax.set_ylabel("Price", fontsize=12)
    ax.grid(True, alpha=0.3)

    # Add legend
    ax.legend(loc="upper left", frameon=True, fancybox=True, shadow=True)

    # Show the plot
    plt.tight_layout()
    plt.show()




.. image-sg:: /gallery/images/sphx_glr_workflow_001.png
   :alt: CAD/USD with Bollinger Bands Strategy
   :srcset: /gallery/images/sphx_glr_workflow_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 120-124

Configure Risk Management
-------------------------
Before opening positions, we need to set up our exit strategy and risk management
parameters to control losses and secure profits.

.. GENERATED FROM PYTHON SOURCE LINES 124-132

.. code-block:: Python


    # Set up static exit strategy with stop loss and take profit
    risk_strategy = exit_strategy.Static(
        stop_loss=4,  # Stop loss at 4 pips
        take_profit=4,  # Take profit at 4 pips
        save_price_data=True,  # Save price data for analysis
    )








.. GENERATED FROM PYTHON SOURCE LINES 133-136

Position Management
-------------------
Create and manage trading positions based on our strategy signals.

.. GENERATED FROM PYTHON SOURCE LINES 136-152

.. code-block:: Python


    # Create position collection with our market data and trading signals
    position_collection = PositionCollection(
        market=market,
        trade_signal=trade_signals,
    )

    # Open positions based on signals and apply exit strategy
    position_collection.open_positions(exit_strategy=risk_strategy)

    # Propagate positions through time to simulate trading
    position_collection.propagate_positions()

    total_positions = len(position_collection)
    print(f"Opened {total_positions} positions during simulation")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Opened 72 positions during simulation




.. GENERATED FROM PYTHON SOURCE LINES 153-156

Capital Management Setup
------------------------
Configure capital management rules to control position sizing and overall risk.

.. GENERATED FROM PYTHON SOURCE LINES 156-165

.. code-block:: Python


    # Configure fixed lot capital management
    capital_mgmt = capital_management.FixedLot(
        capital=1_000_000,  # Starting capital: $1M
        fixed_lot_size=10_000,  # Fixed position size: $10K
        max_capital_at_risk=100_000,  # Maximum capital at risk: $100K
        max_concurrent_positions=100,  # Maximum concurrent positions: 100
    )








.. GENERATED FROM PYTHON SOURCE LINES 166-169

Portfolio Simulation
--------------------
Run the complete portfolio simulation to see how our strategy performs.

.. GENERATED FROM PYTHON SOURCE LINES 169-174

.. code-block:: Python


    # Create portfolio and run simulation
    portfolio = Portfolio(position_collection=position_collection, debug_mode=False)
    portfolio.simulate(capital_management=capital_mgmt)








.. GENERATED FROM PYTHON SOURCE LINES 175-178

Performance Analysis
--------------------
Analyze the results of our trading strategy and display key performance metrics.

.. GENERATED FROM PYTHON SOURCE LINES 178-185

.. code-block:: Python


    # Get comprehensive performance metrics
    metrics = portfolio.get_metrics()

    # Display all performance metrics
    metrics.display()








.. GENERATED FROM PYTHON SOURCE LINES 186-189

Results Interpretation and Summary
----------------------------------
Let's interpret the results and provide insights about the strategy performance.

.. GENERATED FROM PYTHON SOURCE LINES 189-214

.. code-block:: Python


    print("\n" + "=" * 60)
    print("STRATEGY INSIGHTS AND INTERPRETATION")
    print("=" * 60)

    # Strategy summary
    print(f"\nStrategy Summary:")
    print(f"   - Indicator: Bollinger Bands (3-min window, 1.0 sigma)")
    print(f"   - Risk Management: 4-pip stop loss & take profit")
    print(f"   - Capital: $1M with $10K fixed lot sizes")
    print(f"   - Time Period: 4 hours of CAD/USD data")
    print(f"   - Total Positions: {total_positions}")

    print(f"\nKey Takeaways:")
    print(f"   - This example demonstrates a complete TradeTide workflow")
    print(f"   - Bollinger Bands provide volatility-based trading signals")
    print(f"   - Risk management is crucial for protecting capital")
    print(f"   - Portfolio simulation enables strategy evaluation")

    print(f"\nNext Steps:")
    print(f"   - Experiment with different indicator parameters")
    print(f"   - Try alternative exit strategies")
    print(f"   - Test on different currency pairs and timeframes")
    print(f"   - Implement additional technical indicators")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ============================================================
    STRATEGY INSIGHTS AND INTERPRETATION
    ============================================================

    Strategy Summary:
       - Indicator: Bollinger Bands (3-min window, 1.0 sigma)
       - Risk Management: 4-pip stop loss & take profit
       - Capital: $1M with $10K fixed lot sizes
       - Time Period: 4 hours of CAD/USD data
       - Total Positions: 72

    Key Takeaways:
       - This example demonstrates a complete TradeTide workflow
       - Bollinger Bands provide volatility-based trading signals
       - Risk management is crucial for protecting capital
       - Portfolio simulation enables strategy evaluation

    Next Steps:
       - Experiment with different indicator parameters
       - Try alternative exit strategies
       - Test on different currency pairs and timeframes
       - Implement additional technical indicators




.. GENERATED FROM PYTHON SOURCE LINES 215-227

Conclusion
----------
This example showcased a complete trading workflow using TradeTide.
The modular design allows easy experimentation with different strategies,
indicators, and risk management approaches.

For more advanced examples, explore:

* Multi-indicator strategies
* Dynamic exit strategies
* Portfolio optimization
* Walk-forward analysis


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.406 seconds)


.. _sphx_glr_download_gallery_workflow.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow.ipynb <workflow.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow.py <workflow.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow.zip <workflow.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
