
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/workflow.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_workflow.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_workflow.py:


Complete Trading Strategy Workflow with Bollinger Bands
========================================================

This comprehensive example demonstrates a complete end-to-end trading workflow
using the TradeTide library. We'll build a Bollinger Bands-based trading strategy,
backtest it on historical CAD/USD data, and analyze the results.

The workflow covers:
- Market data loading and visualization
- Technical indicator configuration (Bollinger Bands)
- Strategy setup and signal generation
- Position management and risk controls
- Portfolio simulation and performance analysis

This example is perfect for understanding how all TradeTide components work together
to create a professional trading system.

.. GENERATED FROM PYTHON SOURCE LINES 21-24

Import Required Libraries
-------------------------
We start by importing all necessary modules from TradeTide and standard libraries.

.. GENERATED FROM PYTHON SOURCE LINES 24-33

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np
    from TradeTide import Strategy, Portfolio, PositionCollection, Market, Currency
    from TradeTide.times import days, hours, minutes

    from TradeTide.indicators import BollingerBands
    from TradeTide import capital_management, exit_strategy








.. GENERATED FROM PYTHON SOURCE LINES 34-38

Load Market Data
----------------
First, we load historical forex data for the CAD/USD currency pair.
We'll use 4 hours of data to demonstrate the strategy on recent market movements.

.. GENERATED FROM PYTHON SOURCE LINES 38-51

.. code-block:: Python


    market = Market()

    # Load 4 hours of CAD/USD data from the database
    market.load_from_database(
        currency_0=Currency.CAD,
        currency_1=Currency.USD,
        time_span=4 * hours,
    )

    # Display basic market information
    market.display()








.. GENERATED FROM PYTHON SOURCE LINES 52-57

Configure Bollinger Bands Indicator
------------------------------------
We'll use Bollinger Bands as our primary technical indicator. Bollinger Bands
consist of a moving average with upper and lower bands that expand and contract
based on market volatility.

.. GENERATED FROM PYTHON SOURCE LINES 57-67

.. code-block:: Python


    # Configure Bollinger Bands with 3-minute window and 1.0 standard deviation multiplier
    indicator = BollingerBands(
        window=3 * minutes,  # Moving average window
        multiplier=1.0,  # Standard deviation multiplier for bands
    )

    # Run the indicator on our market data
    indicator.run(market)








.. GENERATED FROM PYTHON SOURCE LINES 68-72

Build Trading Strategy
----------------------
Now we create a trading strategy that uses our Bollinger Bands indicator
to generate buy and sell signals.

.. GENERATED FROM PYTHON SOURCE LINES 72-81

.. code-block:: Python


    # Create strategy and add our indicator
    strategy = Strategy()
    strategy.add_indicator(indicator)

    # Generate trading signals based on the strategy
    trade_signals = strategy.get_trade_signal(market)
    signal_count = np.count_nonzero(trade_signals)








.. GENERATED FROM PYTHON SOURCE LINES 82-86

Visualize Bollinger Bands and Market Data
------------------------------------------
Let's plot the Bollinger Bands to visualize the indicator behavior
and understand where trading signals are generated.

.. GENERATED FROM PYTHON SOURCE LINES 86-91

.. code-block:: Python


    # Create the indicator plot (shows only ask prices for clarity)
    indicator.plot()





.. image-sg:: /gallery/images/sphx_glr_workflow_001.png
   :alt: CAD/USD - 4:00:00
   :srcset: /gallery/images/sphx_glr_workflow_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 800x500 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 92-96

Configure Risk Management
-------------------------
Before opening positions, we need to set up our exit strategy and risk management
parameters to control losses and secure profits.

.. GENERATED FROM PYTHON SOURCE LINES 96-104

.. code-block:: Python


    # Set up static exit strategy with stop loss and take profit
    risk_strategy = exit_strategy.Static(
        stop_loss=4,  # Stop loss at 4 pips
        take_profit=4,  # Take profit at 4 pips
        save_price_data=True,  # Save price data for analysis
    )








.. GENERATED FROM PYTHON SOURCE LINES 105-108

Position Management
-------------------
Create and manage trading positions based on our strategy signals.

.. GENERATED FROM PYTHON SOURCE LINES 108-123

.. code-block:: Python


    # Create position collection with our market data and trading signals
    position_collection = PositionCollection(
        market=market,
        trade_signal=trade_signals,
    )

    position_collection.plot()

    # Open positions based on signals and apply exit strategy
    position_collection.open_positions(exit_strategy=risk_strategy)

    # Propagate positions through time to simulate trading
    position_collection.propagate_positions()




.. image-sg:: /gallery/images/sphx_glr_workflow_002.png
   :alt: CAD/USD - 4:00:00, CAD/USD - 4:00:00
   :srcset: /gallery/images/sphx_glr_workflow_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 124-127

Capital Management Setup
------------------------
Configure capital management rules to control position sizing and overall risk.

.. GENERATED FROM PYTHON SOURCE LINES 127-136

.. code-block:: Python


    # Configure fixed lot capital management
    capital_mgmt = capital_management.FixedLot(
        capital=1_000_000,  # Starting capital: $1M
        fixed_lot_size=10_000,  # Fixed position size: $10K
        max_capital_at_risk=100_000,  # Maximum capital at risk: $100K
        max_concurrent_positions=100,  # Maximum concurrent positions: 100
    )








.. GENERATED FROM PYTHON SOURCE LINES 137-140

Portfolio Simulation
--------------------
Run the complete portfolio simulation to see how our strategy performs.

.. GENERATED FROM PYTHON SOURCE LINES 140-145

.. code-block:: Python


    # Create portfolio and run simulation
    portfolio = Portfolio(position_collection=position_collection)
    portfolio.simulate(capital_management=capital_mgmt)








.. GENERATED FROM PYTHON SOURCE LINES 146-149

Performance Analysis
--------------------
Analyze the results of our trading strategy and display key performance metrics.

.. GENERATED FROM PYTHON SOURCE LINES 149-155

.. code-block:: Python


    # Get comprehensive performance metrics
    metrics = portfolio.get_metrics()

    # Display all performance metrics
    metrics.display()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.671 seconds)


.. _sphx_glr_download_gallery_workflow.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow.ipynb <workflow.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow.py <workflow.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow.zip <workflow.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
