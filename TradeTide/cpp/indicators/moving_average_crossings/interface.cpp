#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include "moving_average_crossings.h"

namespace py = pybind11;

PYBIND11_MODULE(interface_indicators, module) {
    module.doc() = "Python bindings for various indicators used in trading.";

    py::class_<BaseIndicator>(module, "BaseIndicator")
        .def(
            "_cpp_run_with_market",
            &BaseIndicator::run_with_market,
            py::arg("market"),
            "Run the indicator with market data."
        )
        .def(
            "_cpp_run_with_vector",
            &BaseIndicator::run_with_vector,
            py::arg("prices"),
            "Run the indicator with a vector of prices."
        )
        ;

    py::class_<MovingAverageCrossing, BaseIndicator>(module, "MOVINGAVERAGECROSSING")
        .def(
            py::init<>(),
            "Default constructor for the MovingAverageCrossing strategy."
        )
        .def(
            py::init<size_t, size_t>(),
            py::arg("short_window"),
            py::arg("long_window")
        )
        .def_readwrite(
            "_cpp_short_window",
            &MovingAverageCrossing::short_window,
            "Get the short moving average window size."
        )
        .def_readwrite(
            "_cpp_long_window",
            &MovingAverageCrossing::long_window,
            "Get the long moving average window size."
        )
        .def_readonly(
            "_cpp_short_moving_average",
            &MovingAverageCrossing::short_moving_average,
            "Get the short moving average values."
        )
        .def_readonly(
            "_cpp_long_moving_average",
            &MovingAverageCrossing::long_moving_average,
            "Get the long moving average values."
        )
        .def_readonly(
            "_cpp_signals",
            &MovingAverageCrossing::signals,
            "Get the trading signals generated by the strategy."
        )
        ;
}
